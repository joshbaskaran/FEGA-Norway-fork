spring:

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration

  main:
    allow-circular-references: true

  datasource:
    url: jdbc:postgresql://${DB_INSTANCE:postgres}:${DB_PORT:5432}/${POSTGRES_DB:postgres}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  web:
    resources:
      static-locations: classpath:/static/,file:/app/static/

  data:
    redis:
      host: ${REDIS_HOSTNAME:redis}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DB:0}

  # We choose to use simple in-memory caching instead of Redis for
  # better compatibility and to avoid serialization/deserialization
  # issues with certain classes. Spring Boot automatically uses Redis
  # when spring-boot-starter-data-redis is on the classpath.
  cache:
    type: simple

  rabbitmq:
    connections:
      cega:
        host: ${BROKER_HOST:public-mq}
        port: ${BROKER_PORT:5671}
        virtual-host: ${BROKER_VHOST:/}
        username: ${BROKER_USERNAME:admin}
        password: ${BROKER_PASSWORD:guest}
        ssl:
          validate-server-certificate: true
          enabled: true
          algorithm: TLSv1.2
      tsd:
        host: ${TSD_MQ_HOST:mq}
        port: ${TSD_MQ_PORT:5671}
        virtual-host: ${TSD_MQ_VHOST:/}
        username: ${TSD_MQ_USERNAME:admin}
        password: ${TSD_MQ_PASSWORD:admin}
        ssl:
          validate-server-certificate: true
          enabled: true
          algorithm: TLSv1.2

  security:
    user:
      name: ${ADMIN_USER}
      password: ${ADMIN_PASSWORD}

elixir:
  client:
    id: ${CLIENT_ID}
    secret: ${CLIENT_SECRET}

ga4gh:
  passport:
    # First, the public key is checked. If present, it's used for validating the token and openid-configuration-url is not used.
    public-key-path: ${PASSPORT_PUBLIC_KEY_PATH:/etc/ega/jwt/passport.pem}
    # If public key is absent, then openid-configuration-url is used to query JWK and fetch the public key.
    openid-configuration-url: ${OPENID_CONFIGURATION_URL:https://login.elixir-czech.org/oidc/.well-known/openid-configuration}
  visa:
    # First, the public key is checked. If present, it's used for validating the token. Otherwise, JKU is used instead (entry in the header).
    public-key-path: ${VISA_PUBLIC_KEY_PATH:/etc/ega/jwt/visa.pem}

cega:
  auth-url: ${CEGA_AUTH_URL}
  username: ${CEGA_USERNAME}
  password: ${CEGA_PASSWORD}

tsd:
  secure: ${TSD_SECURE:true}
  host: ${TSD_HOST:api.tsd.usit.no}
  project: ${TSD_PROJECT:p11}
  app-id: ${TSD_APP_ID:ega}
  app-out-id: ${TSD_APP_OUT_ID:egaout}
  access-key: ${TSD_ACCESS_KEY}
  inbox-location: ${TSD_INBOX_LOCATION:/%s-%s/files/}
  root-ca: ${TSD_ROOT_CERT_PATH:/etc/ega/ssl/CA.cert}
  root-ca-password: ${TSD_ROOT_CERT_PASSWORD:}

mq:
  tsd:
    host: ${TSD_MQ_HOST:mq}
    port: ${TSD_MQ_PORT:5671}
    virtual-host: ${TSD_MQ_VHOST:/}
    username: ${TSD_MQ_USERNAME:admin}
    password: ${TSD_MQ_PASSWORD:admin}
    exchange: ${TSD_MQ_EXCHANGE:sda}
    export-requests-routing-key: ${TSD_MQ_EXPORT_REQUEST_ROUTING_KEY:exportRequests}
    inbox-routing-key: ${TSD_MQ_INBOX_ROUTING_KEY:inbox}
    tls: ${TSD_MQ_ENABLE_TLS:true}
    truststore: ${TRUSTSTORE}
    truststore-password: ${TRUSTSTORE_PASSWORD}

heartbeat:
  ok_if_ok_is_after_failed_and_diff_in_minutes_ge: 10
  not_ok_if_failed_is_after_ok_and_diff_in_minutes_ge: 3

server.ssl:
  enabled: ${SSL_ENABLED:true}
  key-store-type: PKCS12
  key-store: file:/etc/ega/ssl/server.p12
  key-store-password: ${SERVER_CERT_PASSWORD}
